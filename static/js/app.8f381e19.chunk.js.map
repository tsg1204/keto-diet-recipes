{"version":3,"sources":["data/data.js","pages/CategoriesPage.js","pages/CategoryMealsPage.js","components/HeaderButton.js","pages/MealDetailPage.js","pages/FavoritePage.js","navigation/AppNavigator.js","App.js","web-build/register-service-worker.js","assets/fonts/OpenSans-Regular.ttf","assets/fonts/OpenSans-Bold.ttf"],"names":["Colors","CATEGORIES","id","title","MEALS","category","imageUrl","duration","ingredients","steps","CategoriesPage","navigation","SafeAreaView","style","styles","container","FlatList","keyExtractor","item","data","renderItem","itemData","TouchableOpacity","gridItem","onPress","navigate","categoryId","View","Text","headerStyle","backgroundColor","Platform","OS","headerTintColor","StyleSheet","create","flex","marginTop","Constants","statusBarHeight","justifyContent","alignItems","margin","width","wp","fontFamily","fontSize","hp","height","color","textAlign","paddingLeft","CategoryMealPage","catId","Dimensions","get","getParam","meals","filter","meal","indexOf","ListItem","props","image","listItem","itemId","listRow","listHeader","ImageBackground","source","uri","bgImage","titleContainer","numberOfLines","listDetail","navigationData","headerTitle","find","cat","padding","borderRadius","overflow","marginVertical","marginHorizontal","flexDirection","paddingHorizontal","paddingVertical","CustomHeaderButton","IconComponent","Ionicons","iconSize","children","MealDetailPage","selectedItem","ScrollView","imageContainer","details","map","ingredient","key","step","headerRight","HeaderButtonComponent","HeaderButton","iconName","console","log","marginLeft","FavoritesPage","AppNavigator","createStackNavigator","Categories","CategoryMeals","screen","CategoryMealsPage","MealDetails","FavoriteMeal","FavoritePage","createAppContainer","fetchFonts","Font","require","App","useState","fontLoaded","setFontLoaded","AppLoading","startAsync","onFinish","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"4OAAaA,EACG,UADHA,EAEK,UAGLC,EAAa,CACxB,CAACC,GAAI,IAAKC,MAAO,mBACjB,CAACD,GAAI,IAAKC,MAAO,YACjB,CAACD,GAAI,IAAKC,MAAO,gBACjB,CAACD,GAAI,IAAKC,MAAM,kBAGLC,EAAQ,CACnB,CACEF,GAAI,IACJG,SAAU,CAAC,KACXF,MAAO,qCACPG,SAAU,qHACVC,SAAU,GACVC,YAAa,CACX,yBACA,yBACA,gDACA,iCACA,mCACA,iCACA,+BACA,6BAEFC,MAAO,CACL,kHACA,0LACA,uIAGJ,CACEP,GAAI,IACJG,SAAU,CAAC,IAAK,KAChBF,MAAO,uBACPG,SAAU,yGACVC,SAAU,EACVC,YAAa,CACX,wCACA,0BACA,kBACA,0BACA,kCACA,uCACA,kEACA,6DACA,sBACA,qBACA,+BAEHC,MAAO,CACJ,4LACA,4aACA,2PAGJ,CACEP,GAAI,IACJG,SAAU,CAAC,KACXF,MAAO,2BACPG,SAAU,6FACVC,SAAU,GACVC,YAAa,CACX,gCACA,gCACA,iCACA,qCACA,uCACA,0BACA,mBACA,yBACA,mBACA,0BACA,uBAEFC,MAAO,CACL,kVACA,4EACA,yGAGJ,CACEP,GAAI,IACJG,SAAU,CAAC,KACXF,MAAO,kCACPG,SAAU,mHACVC,SAAU,GACVC,YAAa,CACX,2CACA,uBACA,+CACA,kCACA,sCACA,4BACA,4BAEFC,MAAO,CACL,4JACA,0NACA,2HAGJ,CACEP,GAAI,IACJG,SAAU,CAAC,KACXF,MAAO,qCACPG,SAAU,sHACVC,SAAU,GACVC,YAAa,CACX,mBACA,iCACA,4BACA,2BACA,mCACA,uCACA,8BAEFC,MAAO,CACL,oPACA,yIACA,uNAGJ,CACEP,GAAI,IACJG,SAAU,CAAC,KACXF,MAAO,iCACPG,SAAU,kHACVC,SAAU,GACVC,YAAa,CACX,6CACA,2EACA,6CACA,6BACA,SACA,6BACA,mDACA,4BACA,oDACA,0BACA,8BAEFC,MAAO,CACL,+OACA,2iBACA,sLCzIAC,EAAiB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,WAmBtB,OACE,kBAAC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","file":"static/js/app.8f381e19.chunk.js","sourcesContent":["export const Colors = {\n  primaryColor: '#8bc34a',\n  secondaryColor: '#795548' \n}\n\nexport const CATEGORIES = [\n  {id: '1', title: '15 minute meals'},\n  {id: '2', title: 'Low carb'},\n  {id: '3', title: 'Quick & Easy'},\n  {id: '4', title:'Refined sugar'}\n];\n\nexport const MEALS = [\n  {\n    id: '1',\n    category: ['1'],\n    title: 'Chilli, pea, bacon and fetta pasta',\n    imageUrl: 'https://img.taste.com.au/yN_83Ze6/w643-h428-cfill-q90/taste/2016/11/chilli-pea-bacon-and-fetta-pasta-105956-1.jpeg',\n    duration: 10,//duration\n    ingredients: [\n      '375g orecchiette pasta',\n      '1 1/2 cups frozen peas',\n      '175g shortcut bacon rashers, trimmed, chopped',\n      '4 garlic cloves, thinly sliced',\n      '1 long red chilli, thinly sliced',\n      '80g marinated fetta, reserving',\n      '2 tablespoons marinating oil',\n      '1/2 cup fresh mint leaves'\n    ],\n    steps: [\n      'Cook pasta following packet directions until tender, adding peas for the last 2 minutes of cooking time. Drain.',\n      'Meanwhile, heat olive oil in a large, deep frying pan over medium-high heat. Add bacon and garlic. Cook for 4 minutes or until golden. Add chilli. Cook for 1 minute or until softened.',\n      'Add pasta, crumbled fetta, reserved marinating oil and mint to bacon mixture. Season with salt and pepper. Toss to combine. Serve.'\n    ]\n  },\n  {\n    id: '2',\n    category: ['1', '3'],\n    title: 'Burgers with the lot',\n    imageUrl: 'https://img.taste.com.au/CSuK5ujx/w643-h428-cfill-q90/taste/2016/11/burgers-with-the-lot-101230-1.jpeg',\n    duration: 6,//duration\n    ingredients: [\n      '150g canned beetroot, drained, grated',\n      '2 tablespoons olive oil',\n      '500g beef mince',\n      '1 garlic clove, crushed',\n      'Finely grated zest of 1/2 lemon',\n      '1 tablespoon chopped rosemary leaves',\n      '2 tablespoons marinating oil1 tablespoon chopped oregano leaves',\n      '1/2 cup fresh mint leav4 English muffins, split, toastedes',\n      '1 cup rocket leaves',\n      '2 tomatoes, sliced',\n      '4 eggs, fried sunny-side up'\n    ],\n   steps: [\n      'To make the beetroot relish, combine beetroot with 1 tbs olive oil. Season.ook pasta following packet directions until tender, adding peas for the last 2 minutes of cooking time. Drain.',\n      'Combine the beef with the garlic, lemon zest and herbs, then season. Use your hands to shape mixture into four 9cm patties. Heat remaining 1 tbs oil in a frypan over medium heat and cook for 3 minutes each side or until cooked to your liking.Meanwhile, heat olive oil in a large, deep frying pan over medium-high heat. Add bacon and garlic. Cook for 4 minutes or until golden. Add chilli. Cook for 1 minute or until softened.',\n      'Layer the muffin bases with rocket, tomato, beetroot relish, patties and eggs, then season and top with muffin lids.Add pasta, crumbled fetta, reserved marinating oil and mint to bacon mixture. Season with salt and pepper. Toss to combine. Serve.'\n    ]\n  },\n  {\n    id: '3',\n    category: ['2'],\n    title: 'Olive oil poached salmon',\n    imageUrl: 'https://img.taste.com.au/lESTs8vn/w643-h428-cfill-q90/taste/2016/11/olive-oil-84695-2.jpeg',\n    duration: 45,//duration\n    ingredients: [\n      '2 small lemons, thinly sliced',\n      '8 sprigs fresh basil, trimmed',\n      '2 garlic cloves, thinly sliced',\n      '1 teaspoon whole black peppercorns',\n      '1 tablespoon capers, roughly chopped',\n      '4 (750g) salmon fillets',\n      '3 cups olive oil',\n      'Baby spinach, to serve',\n      'Tomato, to serve',\n      'Kalamata olives, to ser',\n      'Red onion, to serve'\n    ],\n    steps: [\n      'Preheat oven to 130°C/110°C fan-forced. Place half the lemon slices over the base of an 8 cup-capacity ovenproof dish. Top with half the basil, half the garlic, half the peppercorns and half the capers. Place fish in dish. Top with remaining basil, garlic, peppercorns and capers. Pour oil over fish (oil should just cover fish).',\n      'Bake fish for 40 to 45 minutes for medium or until cooked to your liking.',\n      'Using a slotted spoon, transfer fish to a plate. Flake. Serve with lemon slices and spinach mixture.'\n    ]\n  },\n  {\n    id: '4',\n    category: ['3'],\n    title: 'Lemon haloumi with fried capers',\n    imageUrl: 'https://img.taste.com.au/3leubigm/w720-h480-cfill-q80/taste/2016/11/lemon-haloumi-with-fried-capers-72418-1.jpeg',\n    duration: 10,//duration\n    ingredients: [\n      '1 1/2 tablespoons extra virgin olive oil',\n      '180g haloumi, sliced',\n      '2 small red birdseye chillies, thinly sliced',\n      '2 teaspoons drained baby capers',\n      '1 teaspoon finely grated lemon rind',\n      '2 tablespoons lemon juice',\n      '80g mixed lettuce leaves'\n    ],\n    steps: [\n      'Heat 2 teaspoons oil in a large frying pan over medium-high heat. Cook haloumi, in batches, for 2 minutes each side or until golden. Transfer to a plate.',\n      'Heat remaining oil in pan. Add chilli and capers. Cook, stirring, for 3 to 5 minutes or until capers are heated through and chilli is golden. Add rind. Cook, stirring, for 1 minute. Stir in juice. Bring to a simmer.',\n      'Arrange haloumi and lettuce on a serving plate. Drizzle with hot lemon mixture. Season with pepper. Serve immediately.'\n    ]\n  },\n  {\n    id: '5',\n    category: ['4'],\n    title: 'Sugar-free mango and coconut balls',\n    imageUrl: 'https://img.taste.com.au/enssRrT8/w643-h428-cfill-q90/taste/2018/12/sugar-free-mango-and-coconut-balls-145720-2.jpg',\n    duration: 20,//duration\n    ingredients: [\n      '125g dried mango',\n      '50g (2/3 cup) shredded coconut',\n      '50g (1/2 cup) rolled oats',\n      '145g (1 cup) raw cashews',\n      '60g (3/4 cup) desiccated coconut',\n      '1 tablespoon finely grated lime zest',\n      '1 teaspoon vanilla extract'\n    ],\n    steps: [\n      'Use kitchen scissors to cut the mango into small (about 1.5cm) pieces. Place in a heatproof bowl and pour 125 ml (½ cup) of boiling water. Set aside for 10-15 minutes, stirring occasionally, or until mango has softened and water absorbed.',\n      'Place the shredded coconut in a frying pan and stir over medium heat for about 3 minutes or until golden. Transfer to a plate to cool.',\n      'Process the oats a food processor until well chopped. Add the cashews, desiccated coconut, lime zest, vanilla, a pinch of salt and mango (with any water that may not have absorbed). Process until well combined.'\n    ]\n  },\n  {\n    id: '6',\n    category: ['4'],\n    title: 'Better-for-you banana pancakes',\n    imageUrl: 'https://img.taste.com.au/ae10R411/w643-h428-cfill-q90/taste/2018/01/better-for-you-banana-pancakes-134286-1.jpg',\n    duration: 50,//duration\n    ingredients: [\n      '100g mashed banana (about 1 medium banana)',\n      '150g (1 cup) wholemeal plain flour or purple wheat plain flour (see tip)',\n      '60g (1/2 cup) almond meal or hazelnut meal',\n      '1 teaspoon ground cinnamon',\n      '4 eggs',\n      '150ml milk kefir (see tip)',\n      '1 tablespoon virgin macadamia oil or coconut oil',\n      '2 teaspoons baking powder',\n      '125g (1/2 cup) fresh ricotta, to serve (optional)',\n      'Mixed berries, to serve',\n      'Pure maple syrup, to serve'\n    ],\n    steps: [\n      'Place the banana, flour, nut meal, cinnamon, eggs, kefir and 2 tsp oil in a blender or a food processor. Blend or process until smooth and well combined. Add the baking powder and process for a further 5-10 seconds, until just combined.',\n      'Heat a non-stick frying pan over medium-high heat. Add 1 tsp of the remaining oil. Pour 1/4-cupful of batter into the pan and gently swirl to create a pancake about 12cm in diameter. Cook for 1-2 minutes, until bubbles begin to form on the surface and the pancake is golden underneath. Carefully flip and cook for a further 1-2 minutes, until golden on both sides and cooked through. Transfer to a plate and cover loosely with foil to keep warm. Repeat with the remaining mixture (and remaining 1 tsp oil, if needed) until all the batter has been used.',\n      'Divide the pancakes among serving plates. Top each stack with 11 ⁄2 tbs ricotta, if you like. Scatter with the mixed berries and serve with a light drizzle of maple syrup.'\n    ]\n  }\n];\n","import React from 'react';\nimport { View, Text, Button, StyleSheet , SafeAreaView, FlatList, TouchableOpacity, Platform} from 'react-native';\nimport {\n  heightPercentageToDP as hp,\n  widthPercentageToDP as wp,\n } from 'react-native-responsive-screen';\nimport Constants from 'expo-constants';\n\nimport { CATEGORIES, Colors } from '../data/data';\n//https://reactnative.dev/docs/flatlist\n//https://reactnative.dev/docs/platform-specific-code\n\nconst CategoriesPage = ({ navigation })=> {\n  const renderGridItem = itemData => {\n    return (\n      <TouchableOpacity\n        style={styles.gridItem}\n        onPress={() => {\n          navigation.navigate('CategoryMeals', {\n            categoryId: itemData.item.id\n          });\n        }}\n      >\n        <View style={styles.title}>\n          <Text>{itemData.item.title}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n    //console.log('props from CategoriesScreen: ', props)\n    return (\n      <SafeAreaView style={styles.container}>\n        <FlatList\n          keyExtractor={(item) => item.id}\n          data={CATEGORIES}\n          renderItem={renderGridItem}\n          //numColumns={2}\n      />    \n      </SafeAreaView>\n    );\n};\n\nCategoriesPage['navigationOptions'] = {\n  title: 'Keto Recipes Categories',\n  headerStyle: {\n    backgroundColor: Platform.OS === 'ios' ? '' : Colors.primaryColor,\n  },\n  headerTintColor: Colors.secondaryColor \n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  gridItem: {\n    flex: 1,\n    margin: 15,\n    width: wp('40%'),\n    backgroundColor: '#c5e1a5',\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: hp('2%'),\n    height: hp('5%'),\n    color: Colors.secondaryColor,\n    textAlign: 'center',\n    paddingLeft: 30,\n    justifyContent: 'space-evenly',    \n  }\n});\n\nexport default CategoriesPage;","import React from 'react';\nimport { View, Text, Dimensions, StyleSheet, FlatList, TouchableOpacity, Platform, ImageBackground } from 'react-native';\n\nimport {\n  heightPercentageToDP as hp,\n  widthPercentageToDP as wp,\n } from 'react-native-responsive-screen';\n\nimport { CATEGORIES, Colors, MEALS } from '../data/data';\n\nconst CategoryMealPage = ({ navigation }) => {\n  //may need to use for web setup\n  const currentWindow = Dimensions.get('window');\n  //get category id from categories page via props.navigation\n  const catId = navigation.getParam('categoryId');\n  //retrive the selected category from categories list\n  const meals = MEALS.filter( meal => meal.category.indexOf(catId) >= 0);\n\n  function ListItem(props) {\n    const { id, image, title, duration } = props;\n    return (\n      <View style={styles.listItem}>\n        <TouchableOpacity \n          onPress={() => {\n            navigation.navigate('MealDetails', {\n                itemId: id\n            });\n          }}          \n        >\n          <View>\n            <View style={{ ...styles.listRow, ...styles.listHeader }}>\n              <ImageBackground\n                source={{ uri: image }}\n                style={styles.bgImage}\n              >\n                <View style={styles.titleContainer}>\n                  <Text style={styles.title} numberOfLines={1}>\n                    {title}\n                  </Text>\n                </View>\n              </ImageBackground>\n            </View>\n            <View style={{ ...styles.listRow, ...styles.listDetail }}>\n              <Text style={styles.duration}>Duration: {duration} min</Text>\n            </View>\n          </View>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const renderListItem = itemData => {\n    return (\n      <ListItem\n        id={itemData.item.id}\n        title={itemData.item.title}\n        image={itemData.item.imageUrl}\n        duration={itemData.item.duration}\n      />\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={meals}\n        keyExtractor={(item) => item.id}\n        renderItem={renderListItem}\n        style={{ width: wp('100%') }}\n      />\n    </View>\n  );\n};\n\nCategoryMealPage['navigationOptions'] = (navigationData) => {\n  const catId = navigationData.navigation.getParam('categoryId');\n  const selectedCat = CATEGORIES.find( cat => cat.id === catId);\n\n  return {\n    headerTitle: `Category: ${selectedCat.title}`,\n    headerStyle: {\n      backgroundColor: Platform.OS === 'ios' ? '' : Colors.primaryColor,\n    },\n    headerTintColor: Colors.secondaryColor \n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 15,\n  },\n  listItem: {\n    backgroundColor: '#f5f5f5',\n    borderRadius: 10,\n    overflow: 'hidden',\n    marginVertical: 10,\n    marginHorizontal: Platform.OS === 'ios' ? 15 : 100,\n  },\n  bgImage: {\n    //have to adjust images size\n    width: Platform.OS === 'ios' ? Dimensions.get('screen').width : Dimensions.get('window').width,\n    height: Platform.OS === 'ios' ? Dimensions.get('screen').width*.5 : Dimensions.get('window').width*.2,\n    justifyContent: 'flex-end',\n  },\n  listRow: {\n    flexDirection: 'row'\n  },\n  listHeader: {\n    //height: hp('85%'),\n  },\n  listDetail: {\n    paddingHorizontal: 10,\n    alignItems: 'center',\n    //height: hp('5%'),\n    fontFamily: 'open-sans-bold',\n  },\n  titleContainer: {\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    paddingVertical: 5,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: hp('1.9%'),\n    color: 'white',\n    textAlign: 'center'\n  },\n  duration: {\n    fontFamily: 'open-sans',\n    fontSize: hp('1.7%'),\n  }\n});\n\nexport default CategoryMealPage;","import React from 'react';\nimport { HeaderButton } from 'react-navigation-header-buttons';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport { Colors } from '../data/data';\n\nconst CustomHeaderButton = props => {\n  return (\n    <HeaderButton\n      {...props}\n      IconComponent={Ionicons}\n      iconSize={23}\n      color={ Colors.secondaryColor}\n    />\n  );\n};\n\nexport default CustomHeaderButton;","import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, Platform, Image, Dimensions, ImageBackground } from 'react-native';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport {\n  heightPercentageToDP as hp,\n  widthPercentageToDP as wp,\n } from 'react-native-responsive-screen';\n\nimport { Colors, MEALS } from '../data/data';\nimport HeaderButton from '../components/HeaderButton';\n\nconst ListItem = props => {\n  return (\n    <View style={styles.listItem}>\n      <Text>{props.children}</Text>\n    </View>\n  );\n};\n\nconst MealDetailPage = ({ navigation }) => {\n  const itemId = navigation.getParam('itemId');\n\n  const selectedItem = MEALS.find(meal => meal.id === itemId);\n\n  return (\n    <ScrollView>\n      <View style={styles.container}>\n        <View style={styles.imageContainer}>\n          <ImageBackground source={{ uri: selectedItem.imageUrl }} style={styles.image} />\n        </View>\n        <View style={styles.details}>\n          <Text>Duration: {selectedItem.duration} min</Text>\n        </View>\n        <Text style={styles.title}>Ingredients</Text>\n        {selectedItem.ingredients.map(ingredient => (\n          <ListItem key={ingredient}>{ingredient}</ListItem>\n        ))}\n        <Text style={styles.title}>Steps</Text>\n        {selectedItem.steps.map(step => (\n          <ListItem key={step}>{step}</ListItem>\n        ))}\n      </View>\n    </ScrollView>\n  );\n};\n\nMealDetailPage['navigationOptions'] = (navigationData) => {\n  const itemId = navigationData.navigation.getParam('itemId');\n\n  const selectedItem = MEALS.find(meal => meal.id === itemId);\n\n  return {\n    headerTitle: ` ${selectedItem.title}`,\n    headerStyle: {\n      backgroundColor: Platform.OS === 'ios' ? '' : Colors.primaryColor,\n    },\n    headerTintColor: Colors.secondaryColor,\n    headerRight: (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Favorite\"\n          iconName=\"ios-heart-empty\"\n          onPress={() => {\n            console.log('Mark as favorite!');\n          }}\n        />\n      </HeaderButtons>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 15,\n  },\n  imageContainer: {\n    marginVertical: 10,\n    marginHorizontal: Platform.OS === 'ios' ? 5 : 50,\n  },\n  image: {\n    width: Platform.OS === 'ios' ? Dimensions.get('screen').width : Dimensions.get('window').width,\n    height: Platform.OS === 'ios' ? Dimensions.get('screen').width*.5 : Dimensions.get('window').width*.2,\n    justifyContent: 'flex-end',\n  },\n  details: {\n    flexDirection: 'row',\n    padding: 5,\n    marginLeft: 20,\n    textAlign: 'left',\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: hp('1.9%'),\n    textAlign: 'center',\n    color: Colors.secondaryColor\n  },\n  listItem: {\n    marginVertical: 5,\n    marginHorizontal: Platform.OS === 'ios' ? 40 : 200,\n    padding: 5\n  }\n});\n\nexport default MealDetailPage;","import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nconst FavoritesPage = props => {\n  return (\n    <View style={styles.container}>\n      <Text>The Favorites Page!</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport default FavoritesPage;","\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\n\nimport CategoriesPage from '../pages/CategoriesPage';\nimport CategoryMealsPage from '../pages/CategoryMealsPage';\nimport MealDetailPage from '../pages/MealDetailPage';\nimport FavoritePage from '../pages/FavoritePage';\n\nconst AppNavigator = createStackNavigator({\n  Categories: CategoriesPage,\n  CategoryMeals: {\n    screen: CategoryMealsPage\n  },\n  MealDetails: MealDetailPage,\n  FavoriteMeal: FavoritePage\n});\n\nexport default createAppContainer(AppNavigator);","import React, { useState } from 'react';\nimport { Text, View , StyleSheet} from 'react-native';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport { SafeAreaProvider , initialWindowSafeAreaInsets } from 'react-native-safe-area-context';\nimport {\n  heightPercentageToDP as hp,\n  widthPercentageToDP as wp,\n } from 'react-native-responsive-screen';\n import Constants from 'expo-constants';\n\n//react native navigation https://reactnavigation.org/docs/4.x/getting-started/\nimport AppNavigator from './navigation/AppNavigator';\n\nconst fetchFonts = () => {\n  //got google fonts for the app \n  return Font.loadAsync({\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf')\n  });\n};\n\nexport default function App() {\n  // useState to load fonts\n  const [fontLoaded, setFontLoaded] = useState(false);\n  //from example: have to use AppLoading component of Expo so fonts will be loaded first\n  if (!fontLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => setFontLoaded(true)}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaProvider>\n      <AppNavigator />\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/keto-diet-recipes/expo-service-worker.js', { scope: '/keto-diet-recipes/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/OpenSans-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/OpenSans-Bold.ttf\";"],"sourceRoot":""}